//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class GLProgramWrapper, NSMutableArray, NSMutableDictionary;

@interface GPUAVImageFilter : NSObject
{
    NSMutableArray *targets;	// 8 = 0x8
    NSMutableArray *targetTextureIndices;	// 16 = 0x10
    unsigned int outputTexture;	// 24 = 0x18
    struct CGSize inputTextureSize;	// 32 = 0x20
    struct CGSize cachedMaximumOutputSize;	// 48 = 0x30
    struct CGSize forcedMaximumSize;	// 64 = 0x40
    _Bool overrideInputSize;	// 80 = 0x50
    unsigned int filterSourceTexture;	// 84 = 0x54
    unsigned int filterFramebuffer;	// 88 = 0x58
    GLProgramWrapper *filterProgram;	// 96 = 0x60
    int filterPositionAttribute;	// 104 = 0x68
    int filterTextureCoordinateAttribute;	// 108 = 0x6c
    int filterInputTextureUniform;	// 112 = 0x70
    float backgroundColorRed;	// 116 = 0x74
    float backgroundColorGreen;	// 120 = 0x78
    float backgroundColorBlue;	// 124 = 0x7c
    float backgroundColorAlpha;	// 128 = 0x80
    _Bool preparedToCaptureImage;	// 132 = 0x84
    struct __CVOpenGLESTextureCache *filterTextureCache;	// 136 = 0x88
    struct __CVBuffer *renderTarget;	// 144 = 0x90
    struct __CVBuffer *renderTexture;	// 152 = 0x98
    struct CGSize currentFilterSize;	// 160 = 0xa0
    int inputRotation;	// 176 = 0xb0
    NSMutableDictionary *uniformStateRestorationBlocks;	// 184 = 0xb8
    _Bool _preventRendering;	// 192 = 0xc0
    _Bool _shouldIgnoreUpdatesToThisTarget;	// 193 = 0xc1
    id _targetToIgnoreForUpdates;	// 200 = 0xc8
    struct GPUAVTextureOptions _outputTextureOptions;	// 208 = 0xd0
}

+ (const float *)textureCoordinatesForRotation:(int)arg1;	// IMP=0x000000000001d3b0
@property(nonatomic) struct GPUAVTextureOptions outputTextureOptions; // @synthesize outputTextureOptions=_outputTextureOptions;
@property(nonatomic) id targetToIgnoreForUpdates; // @synthesize targetToIgnoreForUpdates=_targetToIgnoreForUpdates;
@property(nonatomic) _Bool shouldIgnoreUpdatesToThisTarget; // @synthesize shouldIgnoreUpdatesToThisTarget=_shouldIgnoreUpdatesToThisTarget;
@property(nonatomic) _Bool preventRendering; // @synthesize preventRendering=_preventRendering;
@property(readonly) struct __CVBuffer *renderTarget; // @synthesize renderTarget;
- (void).cxx_destruct;	// IMP=0x000000000001fc94
- (void)removeAllTargets;	// IMP=0x000000000001f99c
- (void)removeTarget:(id)arg1;	// IMP=0x000000000001f7b4
- (void)addTarget:(id)arg1 atTextureLocation:(long long)arg2;	// IMP=0x000000000001f5ec
- (void)addTarget:(id)arg1;	// IMP=0x000000000001f560
- (id)targets;	// IMP=0x000000000001f540
- (void)notifyTargetsAboutNewOutputTexture;	// IMP=0x000000000001f394
- (unsigned int)textureForOutput;	// IMP=0x000000000001f384
- (void)setInputTextureForTarget:(id)arg1 atIndex:(long long)arg2;	// IMP=0x000000000001f324
- (struct CGSize)maximumOutputSize;	// IMP=0x000000000001f314
- (void)deleteOutputTexture;	// IMP=0x000000000001f22c
- (void)initializeOutputTextureIfNeeded;	// IMP=0x000000000001f050
- (void)cleanupOutputImage;	// IMP=0x000000000001f01c
- (void)forceProcessingAtSizeRespectingAspectRatio:(struct CGSize)arg1;	// IMP=0x000000000001ef9c
- (void)forceProcessingAtSize:(struct CGSize)arg1;	// IMP=0x000000000001ef28
- (void)setInputRotation:(int)arg1;	// IMP=0x000000000001ef18
- (void)setInputSize:(struct CGSize)arg1;	// IMP=0x000000000001ede8
- (struct CGPoint)rotatedPoint:(struct CGPoint)arg1 forRotation:(int)arg2;	// IMP=0x000000000001ed44
- (struct CGSize)rotatedSize:(struct CGSize)arg1;	// IMP=0x000000000001ed00
- (void)recreateFilterFBO;	// IMP=0x000000000001ec9c
- (void)setInputTexture:(unsigned int)arg1;	// IMP=0x000000000001ec8c
- (long long)nextAvailableTextureIndex;	// IMP=0x000000000001ec84
- (void)newFrameReady;	// IMP=0x000000000001ec10
- (void)setUniformsForProgramAtIndex:(unsigned long long)arg1;	// IMP=0x000000000001ebc0
- (void)setAndExecuteUniformStateCallbackAtIndex:(int)arg1 forProgram:(id)arg2 toBlock:(CDUnknownBlockType)arg3;	// IMP=0x000000000001eb04
- (void)setInteger:(int)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001e980
- (void)setFloatArray:(float *)arg1 length:(int)arg2 forUniform:(int)arg3 program:(id)arg4;	// IMP=0x000000000001e7e4
- (void)setVec4:(struct GPUMathVector4)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001e630
- (void)setVec3:(struct GPUMathVector3)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001e478
- (void)setSize:(struct CGSize)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001e284
- (void)setPoint:(struct CGPoint)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001e090
- (void)setFloat:(float)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001defc
- (void)setMatrix4f:(struct GPUMathMatrix4x4)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001dd30
- (void)setMatrix3f:(struct GPUMathMatrix3x3)arg1 forUniform:(int)arg2 program:(id)arg3;	// IMP=0x000000000001db74
- (void)setFloatArray:(float *)arg1 length:(int)arg2 forUniform:(id)arg3;	// IMP=0x000000000001db10
- (void)setFloatVec4:(struct GPUMathVector4)arg1 forUniform:(id)arg2;	// IMP=0x000000000001da98
- (void)setFloatVec3:(struct GPUMathVector3)arg1 forUniformName:(id)arg2;	// IMP=0x000000000001da28
- (void)setPoint:(struct CGPoint)arg1 forUniformName:(id)arg2;	// IMP=0x000000000001d9c8
- (void)setSize:(struct CGSize)arg1 forUniformName:(id)arg2;	// IMP=0x000000000001d968
- (void)setFloat:(float)arg1 forUniformName:(id)arg2;	// IMP=0x000000000001d910
- (void)setInteger:(int)arg1 forUniformName:(id)arg2;	// IMP=0x000000000001d8b4
- (void)setBackgroundColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4;	// IMP=0x000000000001d880
- (void)prepareForImageCapture;	// IMP=0x000000000001d774
- (struct CGSize)outputFrameSize;	// IMP=0x000000000001d760
- (void)informTargetsAboutNewFrame;	// IMP=0x000000000001d514
- (void)renderToTextureWithVertices:(const float *)arg1 textureCoordinates:(const float *)arg2 sourceTexture:(unsigned int)arg3;	// IMP=0x000000000001d3c8
- (void)setOutputFBO;	// IMP=0x000000000001d3a4
- (void)setFilterFBO;	// IMP=0x000000000001d2fc
- (void)destroyFilterFBO;	// IMP=0x000000000001d1b8
- (void)createFilterFBOofSize:(struct CGSize)arg1;	// IMP=0x000000000001cc58
- (struct CGSize)sizeOfFBO;	// IMP=0x000000000001cbe4
- (struct CGImage *)newCGImageFromCurrentlyProcessedOutputWithOrientation:(long long)arg1;	// IMP=0x000000000001c8b0
- (void)dealloc;	// IMP=0x000000000001c7bc
- (void)setupFilterForSize:(struct CGSize)arg1;	// IMP=0x000000000001c7b8
- (void)initializeAttributes;	// IMP=0x000000000001c760
- (id)init;	// IMP=0x000000000001c70c
- (id)initWithFragmentShaderFromFile:(id)arg1;	// IMP=0x000000000001c608
- (id)initWithFragmentShaderFromString:(id)arg1;	// IMP=0x000000000001c5ac
- (id)initWithVertexShaderFromString:(id)arg1 fragmentShaderFromString:(id)arg2;	// IMP=0x000000000001c0a8

@end

